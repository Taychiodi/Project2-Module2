# -*- coding: utf-8 -*-
"""project2-Ironhack

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZIwU1OBk-VM8ptnIfHB2S7MYYEYYCQK-
"""

import pandas as pd

import pandas as pd
from causalml.inference.meta import XGBTRegressor
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

import zipfile

with zipfile.ZipFile("archive.zip", 'r') as zip_ref:
    zip_ref.extractall("supplement_data")

import os
os.listdir("supplement_data")

import pandas as pd
from causalml.inference.meta import XGBTRegressor
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("supplement_data/Supplement_Sales_Weekly_Expanded.csv")



df = df[df["Platform"].isin(["Amazon", "Walmart", "iHerb"])]

df["treatment"] = (df["Platform"] == "iHerb").astype(int)

df["Revenue"] = pd.to_numeric(df["Revenue"], errors="coerce")

features = ["Category", "Price", "Discount", "Location"]
df = df[features + ["treatment", "Revenue"]].dropna()

X = pd.get_dummies(df[features], drop_first=True)
T = df["treatment"].values
y = df["Revenue"].values

X_train, X_test, T_train, T_test, y_train, y_test = train_test_split(
    X, T, y, test_size=0.2, random_state=2)

xgb = XGBTRegressor()
xgb.fit(X=X_train.values, treatment=T_train, y=y_train)

te_preds = xgb.predict(X_test.values)

sns.histplot(te_preds, bins=30, kde=True)
plt.title("Estimated Treatment Effect: iHerb vs Amazon/Walmart")
plt.xlabel("Estimated uplift in Revenue (â‚¬)")
plt.ylabel("Frequency")
plt.tight_layout()
plt.show()

df = df[df["Platform"].isin(["Amazon", "Walmart", "iHerb"])]
df["treatment"] = (df["Platform"] == "iHerb").astype(int)
df["Revenue"] = pd.to_numeric(df["Revenue"], errors="coerce")

features = ["Category", "Price", "Discount", "Location"]
df = df[features + ["treatment", "Revenue"]].dropna()

X = pd.get_dummies(df[features], drop_first=True)
T = df["treatment"].values
y = df["Revenue"].values

from sklearn.model_selection import train_test_split
X_train, X_test, T_train, T_test, y_train, y_test = train_test_split(
    X, T, y, test_size=0.2, random_state=4)

from causalml.inference.meta import XGBTRegressor

xgb = XGBTRegressor()
xgb.fit(X=X_train.values, treatment=T_train, y=y_train)
te_preds = xgb.predict(X_test.values)

X_test_df = X_test.copy()
X_test_df["te_pred"] = te_preds

category_cols = [col for col in X_test.columns if col.startswith("Category_")]
X_test_df["category"] = "Other"

for col in category_cols:
    X_test_df.loc[X_test[col] == 1, "category"] = col.replace("Category_", "")

category_te = X_test_df.groupby("category")["te_pred"].mean().sort_values(ascending=False).reset_index()
category_te.columns = ["Category", "Average_Treatment_Effect"]

category_te

#metric: competition per unic products from same category and platform

df.columns

df['competition'] = df.groupby(['Platform', 'Category'])['Product Name'].transform('nunique')

#average price, average discount and competition per category and platform

agg_df = df.groupby(['Platform', 'Category']).agg({
    'Price': ['mean', 'std'],
    'Discount': ['mean', 'std'],
    'competition': 'mean'}).reset_index()

agg_df.columns = ['Platform', 'Category',
                  'Price_mean', 'Price_std',
                  'Discount_mean', 'Discount_std',
                  'Competitors']

agg_df

from causalml.inference.meta import XGBTRegressor
from sklearn.model_selection import train_test_split
import numpy as np

df = df[df["Platform"].isin(["Amazon", "Walmart", "iHerb"])]
df["treatment"] = (df["Platform"] == "iHerb").astype(int)
df["Revenue"] = pd.to_numeric(df["Revenue"], errors="coerce")

features = ["Category", "Price", "Discount", "Location", "competition"]
df = df[features + ["treatment", "Revenue"]].dropna()

X = pd.get_dummies(df[features], drop_first=True)
T = df["treatment"].values
y = df["Revenue"].values

X_train, X_test, T_train, T_test, y_train, y_test = train_test_split(
    X, T, y, test_size=0.2, random_state=2)

xgb = XGBTRegressor()
xgb.fit(X=X_train.values, treatment=T_train, y=y_train)
te_preds = xgb.predict(X_test.values)

X_test_df = X_test.copy()
X_test_df["te_pred"] = te_preds
X_test_df["competition"] = df.loc[X_test.index, "competition"].values

correlation = X_test_df[["competition", "te_pred"]].corr().iloc[0, 1]

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 5))
sns.scatterplot(data=X_test_df, x="competition", y="te_pred")
plt.title(f"competition vs effect (corr = {correlation:.2f})")
plt.xlabel("competition (NÂº of similar products)")
plt.ylabel("estimated effect in revenues(â‚¬)")

plt.tight_layout()
plt.show()

#### reload for randomforest
df = pd.read_csv("supplement_data/Supplement_Sales_Weekly_Expanded.csv")

df = df[df["Platform"].isin(["Amazon", "Walmart", "iHerb"])]
df["Revenue"] = pd.to_numeric(df["Revenue"], errors="coerce")
df["concorrÃªncia"] = df.groupby(['Platform', 'Category'])['Product Name'].transform('nunique')
df = df.dropna(subset=["Revenue", "Price", "Discount", "concorrÃªncia"])

features = ["Platform", "Category", "Price", "Discount", "Location", "concorrÃªncia"]
X = pd.get_dummies(df[features], drop_first=True)
y = df["Revenue"]

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)

rf = RandomForestRegressor(n_estimators=100, random_state=2)
rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)

r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

importances = pd.Series(rf.feature_importances_, index=X.columns).sort_values(ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x=importances.values[:15], y=importances.index[:15])
plt.title("Top 15 Feature Importances - Random Forest")
plt.xlabel("Importance")
plt.tight_layout()
plt.show()

(r2, rmse)

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

st.title("Supplements: Revenue, Competition, Cause and effect")


df["competition"] = df.groupby(['Platform', 'Category'])['Product Name'].transform('nunique')
df["treatment"] = (df["Platform"] == "iHerb").astype(int)

platform = st.selectbox("Escolha uma plataforma:", df["Platform"].unique())
category = st.selectbox("Escolha uma categoria:", df["Category"].unique())

filtered_df = df[(df["Platform"] == platform) & (df["Category"] == category)]

st.write("## MÃ©tricas Gerais")
st.metric("Receita mÃ©dia", f"â‚¬{filtered_df['Revenue'].mean():.2f}")
st.metric("competition", int(filtered_df["competition"].mean()))

st.write("## DistribuiÃ§Ã£o de Receita")
fig, ax = plt.subplots()
sns.histplot(filtered_df["Revenue"], bins=30, kde=True, ax=ax)
st.pyplot(fig)

st.set_page_config(page_title="Supplements - Analysis", layout="wide")

st.title("Analysis on supplement sale")
st.markdown("Explore metrics, competition, cause and effect per platform and category.")

#Upload
uploaded_file = st.file_uploader("ðŸ“‚ LOAD the CSV file", type=["csv"])
if uploaded_file:
    df = pd.read_csv(uploaded_file)
else:
    df = pd.read_csv("supplement_data/Supplement_Sales_Weekly_Expanded.csv")

#prep
df["competition"] = df.groupby(['Platform', 'Category'])['Product Name'].transform('nunique')
df["treatment"] = (df["Platform"] == "iHerb").astype(int)

#Filters
st.sidebar.title("Filters")
platform = st.sidebar.selectbox("Choose the platform:", sorted(df["Platform"].unique()))
category = st.sidebar.selectbox("Choose the category:", sorted(df["Category"].unique()))

filtered_df = df[(df["Platform"] == platform) & (df["Category"] == category)]

# MÃ©tricas
st.subheader(f"Metrics for {platform} - {category}")
col1, col2 = st.columns(2)
col1.metric("Average revenue(â‚¬)", f"{filtered_df['Revenue'].mean():.2f}")
col2.metric("Competition", int(filtered_df["competition"].mean()))

# GrÃ¡fico
st.write("## Revenue Distribution")
fig, ax = plt.subplots()
sns.histplot(filtered_df["Revenue"], bins=30, kde=True, ax=ax)
st.pyplot(fig)

